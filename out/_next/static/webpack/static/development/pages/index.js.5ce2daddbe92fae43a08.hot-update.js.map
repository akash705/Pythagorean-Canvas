{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.5ce2daddbe92fae43a08.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React , {Component } from 'react';\r\nimport * as randomColor from 'randomcolor';\r\n\r\n\r\nclass index extends Component{\r\n   ctx=null;\r\n   canvas=null;\r\n   state={\r\n        error:false,\r\n        checking:true,\r\n        color:randomColor(),//perpendicular color\r\n        color2:randomColor(),//base color,\r\n        isFirst:false\r\n    }\r\n   static getInitialProps =({query,params})=>{\r\n    return {query};\r\n   }\r\n\r\n   getWidth=([x1,y1,x2,y2])=>{\r\n        var x=Math.pow((x2-x1),2);\r\n        var y = Math.pow((y2-y1),2);\r\n        return Math.abs(Math.sqrt(x+y));\r\n   }\r\n   randomColor=()=>{\r\n       return randomColor();\r\n   }\r\n   validation=({a,b,c})=>{\r\n       if(!Number(a)){\r\n        return {status:false,error:\"value 'A' is Invalid\"};\r\n       }\r\n       else if(!Number(b)){\r\n            return {status:false,error:\"value 'B' is Invalid\"}\r\n       }\r\n       else if(!Number(c)){\r\n           return {status:false,error:\"value 'C' is Invalid\"};\r\n       }\r\n       // perpendicular     \r\n       let sqa=Math.pow(a,2);\r\n       // base\r\n       let sqb=Math.pow(b,2);\r\n       // h    \r\n       let sqc=Math.pow(c,2);\r\n       \r\n    //    a should be small\r\n\r\n       if(sqc===(sqa+sqb)){\r\n           if(a  > b){\r\n               [a,b]=[b,a];\r\n               console.log('swapping vlaues');\r\n           }\r\n            return {status:true,a,b,c};\r\n        }\r\n       return {status:false,error:\"Values Don't pass Pythagoras Theorem\"};\r\n   }\r\n   componentWillMount(){\r\n    \r\n   }\r\n   componentDidMount(){\r\n        // console.log(Objet.key)\r\n       \r\n\r\n    }\r\n    basicChecking=()=>{\r\n        if(!this.props.query || !Object.keys(this.props.query).length){\r\n            this.setState((state)=>({\r\n                ...state,\r\n                checking:false,\r\n                error:\"Invalid Params\"\r\n            }))\r\n        }\r\n    \r\n        let {a,b,c} = this.props.query;\r\n        let status,error;\r\n        ({status,a=a,b=b,c=c,error} = this.validation({a,b,c}));\r\n        if(status){\r\n            this.setState((state)=>{\r\n                return {\r\n                    ...state,\r\n                    checking:false,\r\n                }\r\n            })\r\n            this.setupCanvas({a,b,c});\r\n        }\r\n        else{\r\n            this.setState((state)=>{\r\n               return  {\r\n                    ...state,\r\n                    checking:false,\r\n                    error:error\r\n                }\r\n            })\r\n        }\r\n    \r\n        if(!this.props.query){\r\n            alert('Exception Handled');\r\n        }\r\n        \r\n        if(!this.state.checking && !this.state.error){\r\n            this.setupCanvas();\r\n        }\r\n    }\r\n    drawingText=({point:[x,y],text,ctx,type,scaleFactor,rotate})=>{\r\n            ctx.resetTransform();\r\n        ctx.font=\"30px Arial\";\r\n        \r\n            if(!type){\r\n                return  0;\r\n            }\r\n            if(type==\"p\"){\r\n                let length = text*scaleFactor;\r\n                let point = [x,(y+length/2)]\r\n                ctx.fillStyle=\"black\"\r\n                ctx.fillText(text,...point)\r\n                ctx.fillStyle=this.state.color;\r\n            }\r\n            else if(type==\"b\"){\r\n                let length = text*scaleFactor;\r\n                let point = [(x-length/2),y];\r\n                ctx.fillStyle=\"black\"\r\n                ctx.fillText(text,...point)\r\n                ctx.fillStyle=this.state.color2\r\n            }\r\n            else if(type==\"h\"){\r\n                let length = text*scaleFactor;\r\n                let point=[];\r\n                if(text < 10){\r\n                     point = [x+(length/2),y-(length/2)+30];\r\n                }\r\n                else{\r\n                    point=[x+(length/4)-90,y-(length/4)];\r\n                }\r\n                ctx.fillStyle=\"black\"\r\n                ctx.fillText(text,...point)\r\n                ctx.fillStyle=this.state.color2\r\n                \r\n                ctx.translate(x,y);\r\n                ctx.rotate(-(rotate+90)* Math.PI / 180);\r\n                ctx.translate(-x,-y);\r\n\r\n            }\r\n            ctx.stroke();\r\n\r\n\r\n    }\r\n    setupCanvas=({a,b,c})=>{\r\n                \r\n        let canvas = this.canvas = this.refs.canvasCtx\r\n        // canvas.width=window.innerWidth-20;\r\n        // canvas.height=window.innerHeight*2;\r\n        let ctx = this.ctx = this.canvas.getContext(\"2d\");\r\n        let { points , scaleFactor } = this.drawTriangle({canvas:this.canvas,ctx:this.ctx,a,b,c});\r\n        // console.log(points);\r\n\r\n    //    for perpendicular\r\n        {\r\n            let width1 = this.getWidth([...points[0],...points[1]]);\r\n                this.drawRectangle({\r\n                    ctx:ctx,\r\n                    points:points[0],\r\n                    width:width1,\r\n                    height:width1,\r\n                    value:a,\r\n                    type:'p',\r\n                    mainColor:this.state.color\r\n                });\r\n                this.drawingText({point:points[0],text:a,ctx,type:'p',scaleFactor});\r\n        }\r\n        // for base\r\n        {\r\n            let width2 = this.getWidth([...points[1],...points[2]]);\r\n            this.drawRectangle({\r\n                ctx,\r\n                points:points[2],\r\n                width:width2,\r\n                height:width2,\r\n                value:b,\r\n                type:'b',\r\n                mainColor:this.state.color2\r\n            });\r\n            this.drawingText({point:points[1],text:b,ctx,type:'b',scaleFactor});\r\n        }\r\n\r\n        // for hypotenuse \r\n\r\n        {\r\n            let angle = Math.acos(b/c)*180/Math.PI;\r\n            let width3= this.getWidth([...points[0],...points[2]]);\r\n            this.drawRectangle({\r\n                ctx,\r\n                points:points[2],\r\n                width:width3,\r\n                height:width3  ,\r\n                rotate:angle,\r\n                value:c,\r\n                type:'h'\r\n            });\r\n            this.drawingText({point:points[2],text:c,ctx,type:'h',scaleFactor,rotate:angle});\r\n        }\r\n\r\n    }\r\n    drawRectangle=({ ctx ,points:[x,y],width,height , rotate ,scale ,value,mainColor=randomColor(),type})=>{\r\n        ctx.moveTo(x,y);\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(0,0);\r\n        ctx.save();\r\n                ctx.translate(x,y);\r\n                ctx.rotate(-(rotate+90)* Math.PI / 180);\r\n                if(type!=\"h\"){\r\n                    ctx.fillStyle=mainColor;\r\n                }\r\n\r\n                ctx.fillRect(0,0,width,height );\r\n                ctx.translate(-x,-y);\r\n\r\n                ctx.stroke();\r\n                this.drawingInnerLines({x,y,width,scale,ctx,value,type});\r\n        ctx.restore();\r\n        ctx.stroke();\r\n        window.ctx=ctx;\r\n    }\r\n    \r\n    drawingInnerLines({x=0,y=0,width,scale,ctx,value,type}){\r\n            // console.log(data);\r\n            let horizontalLines=[];\r\n            let verticalLines=[];\r\n            let NumberofBoxes=value;\r\n            let distance = width/value;\r\n            // [x,y]=[0,0];\r\n            for(let i=1;i<NumberofBoxes;i++){\r\n                // horizzontal line\r\n                let x1 = x;\r\n                let y1 = y+(distance*i);\r\n                ctx.beginPath();\r\n                ctx.moveTo(x1,y1);\r\n                ctx.lineTo(x1+width,y1);\r\n                // ctx.strokeStyle=\"black\";\r\n                // ctx.lineWidth=1;\r\n                ctx.stroke();\r\n                horizontalLines.push([x1+width,y1]);\r\n\r\n                let x2 = x+(distance*i);\r\n                let y2 = y;\r\n                ctx.beginPath();\r\n                ctx.moveTo(x2,y2);\r\n                ctx.lineTo(x2,y2+width);\r\n                // ctx.strokeStyle=\"black\";\r\n                // ctx.lineWidth=1;\r\n                ctx.stroke();\r\n                verticalLines.push([x2+width,y2]);\r\n            } \r\n            // console.log('horizontal lines',horizontalLines);\r\n            if(type==\"h\"){\r\n                 \r\n                    this.paintingHRect({verticalLines,horizontalLines,scale,width,distance,ctx});\r\n            }\r\n           \r\n    }\r\n    paintingHRect=({verticalLines,horizontalLines,distance,width,scale,ctx})=>{\r\n        \r\n            // console.log(verticalLines,horizontalLines);\r\n            ctx.fillStyle=this.state.color;\r\n            for(let i=horizontalLines.length-1;i>=-1;i--){\r\n                let points=horizontalLines[i];\r\n                if(points){\r\n                    let x = points[0]-distance;\r\n                    // console.log('points',x,points[1]);\r\n                    ctx.fillRect(x,points[1],distance,distance);\r\n                    ctx.strokeStyle=\"black\";\r\n                    ctx.stroke();\r\n                }else{\r\n                    points= horizontalLines[0];\r\n                    let x = points[0]-(distance);\r\n                    console.log('last point',x,points[1]);\r\n                    ctx.fillRect(x,points[1]-distance,distance,distance);\r\n\r\n                }\r\n            }\r\n            for(let i=verticalLines.length-1;i>=-1;i--){\r\n                let points=verticalLines[i];\r\n                if(points){\r\n                    let y = points[1]+width-distance;\r\n                    ctx.fillRect(points[0]-width,y,distance,distance);\r\n                    ctx.strokeStyle=\"white\";\r\n                    ctx.stroke();\r\n                    // console.log('points',points[0]-width,y);\r\n                }else{\r\n                    points= verticalLines[verticalLines.length-1];\r\n                    let y = points[1]+(width-distance);\r\n                    let x = points[0]-(width+distance*verticalLines.length);\r\n                    ctx.fillRect(x,y,distance,distance);\r\n                }\r\n            }\r\n        }\r\n    drawTriangle=({canvas,ctx,a,b,c})=>{\r\n        ctx.beginPath();\r\n        let scaleFactor=(c<30) ? 30:15\r\n        \r\n        let initialPoint=[window.innerWidth/2,window.innerHeight/2];\r\n        let points=[[...initialPoint]];\r\n\r\n        ctx.moveTo(...initialPoint);\r\n        \r\n        let x= initialPoint[0];\r\n        let y=initialPoint[1]+(a*scaleFactor);\r\n        \r\n        points.push([x,y]);\r\n        \r\n\r\n        ctx.lineTo(x,y);        \r\n                \r\n        x = x-(b*scaleFactor);\r\n        \r\n        points.push([x,y]);\r\n        \r\n        ctx.lineTo(x,y);\r\n        \r\n        ctx.fillStyle=\"yellow\";\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        ctx.strokeStyle=\"#333\";\r\n        ctx.stroke();    \r\n            \r\n\r\n        return {points,scaleFactor};\r\n    }\r\n    render(){\r\n        if(!this.state.isFirst){\r\n            this.basicChecking();\r\n            this.setState(state=>{\r\n                return {\r\n                    ...state,\r\n                    isFirst:true\r\n                }\r\n            })\r\n        }\r\n        if(this.state.checking || this.state.error){\r\n                return  (\r\n                    <React.Fragment>\r\n                               <div className=\"msg\">\r\n                                        {this.state.error || \"Wait loading...\"} \r\n                               </div>\r\n                               <div className=\"instruction\">\r\n                                            <p> Query Params : </p>\r\n                                            <p> 'a' , 'b' can be interchanged for Base And Perpendicular</p>\r\n                                            <p> 'c' Must be hypotenuse </p>\r\n                                </div>\r\n                               <style jsx>{`\r\n                                    .msg{\r\n                                        font-weight:bold;\r\n                                        width:100%;\r\n                                        font-size:2rem;\r\n                                        text-align:center;\r\n                                    }\r\n                                    .instruction p {\r\n                                        font-weight:bold;\r\n                                        font-color:#424242;\r\n                                    }\r\n                               `}\r\n                               </style>\r\n                    </React.Fragment>\r\n                )\r\n        }\r\n\r\n        if(this.state.error){\r\n            alert(this.state.error);\r\n            return 0;\r\n        }\r\n\r\n\r\n        return(\r\n            <React.Fragment>\r\n                \r\n                <canvas ref=\"canvasCtx\"  ></canvas>\r\n                <style global jsx>{`\r\n                    canvas{\r\n                        border:1px solid black;\r\n                        \r\n                    }\r\n                    body{\r\n                        margin:0px;\r\n                    }\r\n                `}</style>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AALA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAKA;AACA;AARA;AAAA;AAAA;AAAA;AAUA;AACA;AAXA;AAWA;AAAA;AAAA;AAAA;AACA;AADA;AAXA;AAWA;AAXA;AAWA;AAXA;AAWA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AANA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AASA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AA/QA;;;AAGA;AAIA;;;AAgKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAqEA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAcA;;;;AA5XA;AACA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAiXA;;;;A","sourceRoot":""}